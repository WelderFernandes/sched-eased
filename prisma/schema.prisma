// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  role            String?
  accounts        Account[]
  sessions        Session[]
  Establishment   Establishment? @relation(fields: [establishmentId], references: [id])
  establishmentId String?
  Booking         Booking[]
  Rating          Rating[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Establishment {
  id                      String                 @id @default(uuid())
  name                    String
  address                 String?
  imageUrl                String?
  team                    User[]
  services                Service[]
  bookings                Booking[]
  description             String?
  establishmentCategory   EstablishmentCategory? @relation(fields: [establishmentCategoryId], references: [id])
  establishmentCategoryId String?
  Rating                  Rating[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model Rating {
  id              String         @id @default(cuid())
  rating          Int            @default(0)
  comment         String?        @default("") @db.Text
  user            User?          @relation(fields: [userId], references: [id])
  userId          String
  Establishment   Establishment? @relation(fields: [establishmentId], references: [id])
  establishmentId String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model EstablishmentCategory {
  id             String          @id @default(uuid())
  name           String
  establishments Establishment[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Service {
  id                String           @id @default(uuid())
  name              String
  price             Decimal          @db.Decimal(10, 2)
  establishmentId   String
  establishment     Establishment    @relation(fields: [establishmentId], references: [id])
  description       String
  imageUrl          String
  ServiceCategoty   ServiceCategoty? @relation(fields: [serviceCategotyId], references: [id])
  serviceCategotyId String?
  Booking           Booking[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ServiceCategoty {
  id        String    @id @default(uuid())
  name      String
  Service   Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Booking {
  id              String         @id @default(uuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  services        Service        @relation(fields: [serviceId], references: [id])
  serviceId       String
  establishmentId String
  establishment   Establishment  @relation(fields: [establishmentId], references: [id])
  date            DateTime
  status          BookingStatus? @relation(fields: [statusId], references: [id])
  statusId        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model BookingStatus {
  id        String    @id @default(uuid())
  name      String    @unique
  Booking   Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
